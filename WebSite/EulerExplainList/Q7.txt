We can just loop through all the prime number until we reach 10001st prime number. However, here are the tricks that can signficantly increase the prime searching speed.

For each number \(n\), \(n\) will be a prime number as long as it can't be divided by any prime number below \(\sqrt{n}\). We don't have to loop all the number below \(n\) to determine if it is prime, As this is a \(O(n)\) complexity calculation. As we know <a href="https://en.wikipedia.org/wiki/Prime_number_theorem"> Prime number distribution</a> follows roughly \(log(n)\) distribution. The above method can improve the run time complexity from \(O(n)\) to \(O(logn)\) This gives us the following result: